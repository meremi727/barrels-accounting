// <auto-generated />
using System;
using BarrelsAccounting.Accounting.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Accounting.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    [Migration("20241226232945_aaa")]
    partial class aaa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.Barrel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<string>("Batch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Batch");

                    b.Property<double>("BruttoWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("BruttoWeight");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ProviderCode");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDateTime");

                    b.Property<bool>("IsDrained")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDrained");

                    b.Property<double>("NettoWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("NettoWeight");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Number");

                    b.Property<DateOnly>("ProductionDate")
                        .HasColumnType("date")
                        .HasColumnName("ProductionDate");

                    b.Property<string>("Ral")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Ral");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.Property<Guid?>("StorageObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("StorageObjectId");

                    b.HasKey("Id");

                    b.ToTable("Barrel", (string)null);
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.JournalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BarrelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BarrelId");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTime");

                    b.Property<string>("OperationPayload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OperationPayload");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OperationType");

                    b.Property<Guid?>("StorageObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("StorageObjectId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("Journal", (string)null);
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<Guid?>("DefaultStoragePlaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("DefaultStoragePlaceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("StorageTypeDiscriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("Storage", (string)null);

                    b.HasDiscriminator<string>("StorageTypeDiscriminator").HasValue("Storage");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.StorageObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Barcode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid")
                        .HasColumnName("StorageId");

                    b.Property<string>("StorageObjectTypeDiscriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("StorageObject", (string)null);

                    b.HasDiscriminator<string>("StorageObjectTypeDiscriminator").HasValue("StorageObject");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.AcceptanceStorage", b =>
                {
                    b.HasBaseType("BarrelsAccounting.Accounting.Domain.Storage");

                    b.HasDiscriminator().HasValue("Acceptance");
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.ProductionStorage", b =>
                {
                    b.HasBaseType("BarrelsAccounting.Accounting.Domain.Storage");

                    b.HasDiscriminator().HasValue("Production");
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.Aggregate", b =>
                {
                    b.HasBaseType("BarrelsAccounting.Accounting.Domain.StorageObject");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("Volume");

                    b.HasIndex("StorageId");

                    b.HasDiscriminator().HasValue("Aggregate");
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.StoragePlace", b =>
                {
                    b.HasBaseType("BarrelsAccounting.Accounting.Domain.StorageObject");

                    b.HasDiscriminator().HasValue("StoragePlace");
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.Aggregate", b =>
                {
                    b.HasOne("BarrelsAccounting.Accounting.Domain.ProductionStorage", null)
                        .WithMany("Aggregates")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarrelsAccounting.Accounting.Domain.ProductionStorage", b =>
                {
                    b.Navigation("Aggregates");
                });
#pragma warning restore 612, 618
        }
    }
}
